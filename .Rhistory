game$player_to_play <- interface$loaded_game$player_to_play
game$stats_turns <- interface$loaded_game$stats_turns
interface$previous_results <- interface$loaded_game$previous_results
interface$turns_core_acquisition <- interface$loaded_game$turns_core_acquisition
#HIDE / SHOW COMMAND BUTTONs AS APPROPRIATE
if ((game$turn %/% 2) %% length(seasons) + 1 == length(seasons)){
shinyjs::hideElement(anim=TRUE, animType="fade", time=0.8,id="move_ui")
shinyjs::hideElement(anim=TRUE, animType="fade", time=0.8,id="unstack_ui")
shinyjs::hideElement(anim=TRUE, animType="fade", time=0.8,id="ruler_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="recruit_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="disband_ui")
} else {
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="move_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="unstack_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="ruler_ui")
shinyjs::hideElement(anim=TRUE, animType="fade", time=0.8,id="recruit_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="disband_ui")
}
})
#---------------------------- NEXT TURN BUTTONS ------------------------
#NEXT TURN button
observeEvent(input$next_turn_ui, {
if (game$turn %% 2 == 1){ # END OF RESULTS TURN
#save results to show as "previous results"
interface$previous_results <- plot_map(game$territories,game$nations,game$orders)
#execute orders
interface$temp <- execute_orders(game$orders,game$territories,game$nations)
game$territories <- interface$temp$territories
game$nations <- interface$temp$nations
#messages on captured rulers
if (sum(game$orders$type=="ruler captured",na.rm=TRUE)>0){
for (i in as.numeric(game$orders$tile_number[game$orders$type=="ruler captured"])){
interface$temp <- paste("The king of", game$nations$names[game$nations$names==game$territories$data$owner[i]] ,"is dead. A new king will be crowned next year.")
showNotification(interface$temp, duration = 15, type="error")
}
#reset order table
game$orders <- new_game$orders
# #update ownership of un-owned territories
# if (any((game$territories$data$owner == "no owner")&!is.na(game$territories$data$troops))){
#   game$territories$data$owner[(game$territories$data$owner == "no owner")&!is.na(game$territories$data$troops)] <- game$territories$data$troops[(game$territories$data$owner == "no owner")&!is.na(game$territories$data$troops)]
# }
#
# #if autumn then update territory ownership
# if ((game$turn %/% 2) %% length(seasons) + 1 == length(seasons)-1){
#   game$territories$data$owner <- ifelse((game$territories$data$owner != game$territories$data$troops)&!is.na(game$territories$data$troops), game$territories$data$troops, game$territories$data$owner )
# }
#update territory ownership and counter territory possession
game$territories$data$turns_of_possession <- ifelse(is.na(game$territories$data$troops)|(game$territories$data$troops==game$territories$data$owner), game$territories$data$turns_of_possession + 1, 0 )
game$territories$data$owner <- ifelse((game$territories$data$owner != game$territories$data$troops)&!is.na(game$territories$data$troops), game$territories$data$troops, game$territories$data$owner )
#process core acquisition
game$territories$data$core <- ifelse((game$territories$data$turns_of_possession >= interface$turns_core_acquisition)&(game$territories$data$city == TRUE)&(game$territories$data$owner != "no owner")&(game$territories$data$owner != game$territories$data$core), game$territories$data$owner, game$territories$data$core)
#update number of territories, cities and troops owned by each nation
for (i in 1:nrow(game$nations)){
game$nations$tot_tiles[i]<-sum((game$territories$data$owner==game$nations$names[i]), na.rm=TRUE)
game$nations$tot_cities[i]<-sum((game$territories$data$owner==game$nations$names[i])&(game$territories$data$city==TRUE), na.rm=TRUE)
game$nations$tot_troops[i]<-sum(game$territories$data$n_troops[game$territories$data$troops==game$nations$names[i]], na.rm=TRUE)
}
#make AI more aggressive in the earlier turns
game$nations$ai_expansionism <- round(game$nations$ai_expansionism - 0.5*(game$nations$ai_expansionism - 1),1)
#remove nation with 0 tiles
if(any(game$nations$tot_tiles==0)){
game$nations <- game$nations[game$nations$tot_tiles>0, ]
}
if ((def_player_mode == "shared screen")&(any(game$nations$is_player))){
#this takes into account only ownership of the first player that is to input orders
game$territories$player_tiles <- game$territories$data$tile_number[(game$territories$data$owner %in%  game$nations$names[game$nations$is_player][1])]
game$territories$punits_tiles <- game$territories$data$tile_number[game$territories$data$troops %in% game$nations$names[game$nations$is_player][1]]
} else {
# update list of territories that belong to players
game$territories$player_tiles <- game$territories$data$tile_number[(game$territories$data$owner %in%  game$nations$names[game$nations$is_player])]
#update list of territories in which there is a player controled troop
game$territories$punits_tiles <- game$territories$data$tile_number[game$territories$data$troops %in% game$nations$names[game$nations$is_player]]
}
#bring back ruler to life in winter
if(((game$turn %/% 2) %% length(seasons) + 1 == length(seasons))&any(game$nations$ruler_alive == FALSE)){
for (i in game$nations$names[!game$nations$ruler_alive]){
game$territories$data$ruler[as.numeric(sample(as.character(c(1:nrow(game$territories$data))[game$territories$data$owner == i]),1))] <- TRUE
}
game$nations$ruler_alive <- TRUE
}
#WINNING CONDITION
if (any(game$nations$tot_cities==sum(game$nations$tot_cities, na.rm=TRUE))){
showModal(modalDialog(
title = paste("Congratulations!"),
paste(game$nations$names[which.max(game$nations$tot_cities)],"won the game."),
easyClose = FALSE,
fade=TRUE,
footer = tagList(
modalButton("Keep playing"),
actionButton("won_new_game", "Start a new game"))
))
}
#if next turn is winter say how many troops the nations can recruit/have to disband
if ((game$turn %/% 2) %% length(seasons) + 1 == length(seasons)-1){
for (i in 1:nrow(game$nations)){
if (game$nations$is_player[i]){
interface$temp <- if (game$nations$tot_troops[i]<= game$nations$tot_cities[i] + (game$nations$tot_tiles[i] - game$nations$tot_cities[i]) %/% def_n_tiles_troops){paste(game$nations$names[i], "can recruit",(game$nations$tot_tiles[i] - game$nations$tot_cities[i]) %/% def_n_tiles_troops + game$nations$tot_cities[i]- game$nations$tot_troops[i], "additional troops")} else {paste(game$nations$names[i], "has to disband", game$nations$tot_troops[i] - game$nations$tot_cities[i] - ((game$nations$tot_tiles[i] - game$nations$tot_cities[i]) %/% def_n_tiles_troops), "troops")}
showNotification(interface$temp, duration=NULL, type="warning")
}
#disband additional excess troops
if ((game$turn %/% 2) %% length(seasons) + 1 == length(seasons)){
for (i in 1:nrow(game$nations)){
if (game$nations$tot_troops[i]> game$nations$tot_cities[i] + ((game$nations$tot_tiles[i] - game$nations$tot_cities[i]) %/% def_n_tiles_troops)){
#message
interface$temp <- paste(game$nations$names[i], "had", game$nations$tot_troops[i] - game$nations$tot_cities[i] - ((game$nations$tot_tiles[i] - game$nations$tot_cities[i]) %/% def_n_tiles_troops), "excess troops which disbanded")
showNotification(interface$temp, duration=12, type="error")
#remove excess troops one by one
while (game$nations$tot_troops[i]>game$nations$tot_cities[i] + ((game$nations$tot_tiles[i] - game$nations$tot_cities[i]) %/% def_n_tiles_troops)){
#check if the nation has troops outside cities, which have priority in disbanding
if (any((game$territories$data$troops == game$nations$names[i])&(!game$territories$data$city)&(!is.na(game$territories$data$troops)))){
interface$temp <- sample(as.character(c(1:nrow(game$territories$data))[(game$territories$data$troops == game$nations$names[i])&(!game$territories$data$city)&(!is.na(game$territories$data$troops))]),1)
} else {
interface$temp <- sample(as.character(c(1:nrow(game$territories$data))[(game$territories$data$troops == game$nations$names[i])&(!is.na(game$territories$data$troops))]),1)
}
game$territories <- execute_disband(data.frame(type="disband",tile_number=interface$temp,success=TRUE), game$territories)
#update number of troops nations table
game$nations$tot_troops[i]<-sum(game$territories$data$n_troops[game$territories$data$troops==game$nations$names[i]], na.rm=TRUE)
}
#update stats turns
game$stats_turns <- rbind(game$stats_turns, cbind("turn"=game$turn,game$nations[,c("names","colours","tot_tiles","tot_cities","tot_troops")]))
#move counter to next turn
game$turn <- game$turn+1   #increase turn counter
} else { #END OF INPUT TURN
#deal with multiple players in shared screen model
if (any(game$nations$is_player)&(def_player_mode=="shared screen")&(game$player_to_play<sum(game$nations$is_player,na.rm=TRUE))){
if (nrow(game$orders)>0){
#load orders into hidden orders table
game$hidden_orders <- rbind(game$hidden_orders,game$orders)
#clear orders table
game$orders <- game$orders[0,]
}
#increase shared screen counter
game$player_to_play <- game$player_to_play +1
# update list of territories that belong to a player
game$territories$player_tiles <- game$territories$data$tile_number[(game$territories$data$owner %in%  game$nations$names[game$nations$is_player][game$player_to_play])]
#update list of territories in which there is a player control troop
game$territories$punits_tiles <- game$territories$data$tile_number[game$territories$data$troops %in% game$nations$names[game$nations$is_player][game$player_to_play]]
} else { #lines executed when all players have played or no shared screen mode is active
if (def_player_mode == "shared screen"){
#reset shared screen counter
game$player_to_play <- 1
if (nrow(game$hidden_orders)>0){
#load hidden orders into orders table
game$orders <- rbind(game$hidden_orders,game$orders)
#clear hidden orders table
game$hidden_orders <- game$hidden_orders[0,]
}
#generate AI orders
if (any(game$nations$is_player == FALSE)){
showNotification("AI thinking on its moves .... may take a few seconds",duration=10)
temp <- generate_ai_moves(game$territories,game$nations, game$turn, game$difficulty_bias,seasons, def_n_tiles_troops,type_ai = def_type_ai)
game$orders$to <- as.character(game$orders$to)
game$orders$tile_number <-as.character(game$orders$tile_number)
game$orders <- rbind(game$orders,temp$orders)
#move AI rulers
if (nrow(temp$ruler_placement)>0){
for (k in 1:nrow(temp$ruler_placement)){
#reset previous ruler placement
game$territories$data$ruler[game$territories$data$owner == temp$ruler_placement$nation[k]] <- FALSE
#place in new tile
game$territories$data$ruler[as.numeric(game$territories$data$tile_number)==as.numeric(temp$ruler_placement$tile[k])] <- TRUE
}
#evaluate inserted orders
game$orders  <- evaluate_orders(game$orders,game$territories,game$nations, game$turn, seasons, def_n_tiles_troops=def_n_tiles_troops)
#move counter to next turn
game$turn <- game$turn+1   #increase turn counter
}
#default input mode
interface$input_order_state <- ifelse((game$turn %/% 2) %% length(seasons) + 1 ==length(seasons), "recruit","move")  #reset command switch to move/recruit depending on turn (this impacts how orders are inputted)
#HIDE / SHOW COMMAND BUTTONs
if ((game$turn %/% 2) %% length(seasons) + 1 == length(seasons)){
shinyjs::hideElement(anim=TRUE, animType="fade", time=0.8,id="move_ui")
shinyjs::hideElement(anim=TRUE, animType="fade", time=0.8,id="unstack_ui")
shinyjs::hideElement(anim=TRUE, animType="fade", time=0.8,id="ruler_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="recruit_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="disband_ui")
} else {
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="move_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="unstack_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="ruler_ui")
shinyjs::showElement(anim=TRUE, animType="fade", time=0.8,id="disband_ui")
shinyjs::hideElement(anim=TRUE, animType="fade", time=0.8,id="recruit_ui")
}
})
#--------------------- SHOW PREVIOUS RESULTS BUTTON ---------------------
observeEvent(input$show_previous_ui, {
if (!is.null(interface$previous_results)){
showModal(modalDialog(
title = paste0("Results from last turn:"),
renderPlotly({interface$previous_results}),
easyClose = FALSE,
fade =TRUE,
size= "l"
))
} else {
showNotification("There is no saved result to show")
}
})
#------------------------- NATIONS TABLE BUTTON ---------------------
observeEvent(input$nations_table_ui, {
temp <- game$nations[,c("names","tot_cities","tot_tiles","tot_troops")]
colnames(temp)<- c("Name","Cities","Tiles","Troops")
temp$Cities <- as.integer(temp$Cities)
temp$Troops <- as.integer(temp$Troops)
temp$Tiles <- as.integer(temp$Tiles)
showModal(modalDialog(
title = paste0("Nations' table:"),
renderTable(temp, align="c"),
easyClose = TRUE,
fade =TRUE,
size= "m"
))
})
#----------------------------- STATS BUTTON ---------------------
observeEvent(input$stats_ui, {
#colours
colori <- game$stats_turns$colours[1:length(unique(game$stats_turns$names))]
names(colori) <- game$stats_turns$names[1:length(unique(game$stats_turns$names))]
stats_plot <- ggplot(game$stats_turns,aes(x=turn,y=get(interface$var_plot)+seq(-0.03*length(unique(game$stats_turns$names))/2,0.03*length(unique(game$stats_turns$names))/2, length.out = length(unique(game$stats_turns$names))), text = get(interface$var_plot))) +
geom_line(aes(colour=names), size=1.2) +
theme_classic() +   #altrimenti classic
scale_x_continuous(limits= c(0,game$turn), breaks = c(seq(0,game$turn,4))) +
theme(axis.text.x=element_blank())+
ylab(switch(interface$var_plot,"tot_cities"="Cities","tot_troops"="troops","tot_tiles"="Tiles")) +
theme(legend.position = "none") +
scale_colour_manual(values=colori)
temp <- ggplotly(stats_plot, tooltip = "text", source = "S", kwargs=list(layout=list(hovermode="x")))
showModal(modalDialog(
title = paste0("Stats:"),
renderPlotly(temp),
easyClose = TRUE,
fade =TRUE,
size= "l",
footer = tagList(
actionButton("show_stats_cities", "Cities"),
actionButton("show_stats_tiles","Tiles"),
actionButton("show_stats_troops","Troops"),
modalButton("Close stats"))
))
})
observeEvent(input$show_stats_troops, {
interface$var_plot <- "tot_troops"
#colours
colori <- game$stats_turns$colours[1:length(unique(game$stats_turns$names))]
names(colori) <- game$stats_turns$names[1:length(unique(game$stats_turns$names))]
stats_plot <- ggplot(game$stats_turns,aes(x=turn,y=get(interface$var_plot)+seq(-0.03*length(unique(game$stats_turns$names))/2,0.03*length(unique(game$stats_turns$names))/2, length.out = length(unique(game$stats_turns$names))), text = get(interface$var_plot))) +
geom_line(aes(colour=names), size=1.2) +
theme_classic() +   #altrimenti classic
scale_x_continuous(limits= c(0,game$turn), breaks = c(seq(0,game$turn,4))) +
scale_y_continuous(limits= c(0,NA)) +
theme(axis.text.x=element_blank())+
ylab(switch(interface$var_plot,"tot_cities"="Cities","tot_troops"="troops","tot_tiles"="Tiles")) +
theme(legend.position = "none") +
scale_colour_manual(values=colori)
temp <- ggplotly(stats_plot, tooltip = "text", source = "S", kwargs=list(layout=list(hovermode="x")))
showModal(modalDialog(
title = paste0("Stats:"),
renderPlotly(temp),
easyClose = TRUE,
fade =FALSE,
size= "l",
footer = tagList(
actionButton("show_stats_cities", "Cities"),
actionButton("show_stats_tiles","Tiles"),
actionButton("show_stats_troops","Troops"),
modalButton("Close stats"))
))
})
observeEvent(input$show_stats_tiles, {
interface$var_plot <- "tot_tiles"
#colours
colori <- game$stats_turns$colours[1:length(unique(game$stats_turns$names))]
names(colori) <- game$stats_turns$names[1:length(unique(game$stats_turns$names))]
stats_plot <- ggplot(game$stats_turns,aes(x=turn,y=get(interface$var_plot)+seq(-0.03*length(unique(game$stats_turns$names))/2,0.03*length(unique(game$stats_turns$names))/2, length.out = length(unique(game$stats_turns$names))), text = get(interface$var_plot))) +
geom_line(aes(colour=names), size=1.2) +
theme_classic() +   #altrimenti classic
scale_x_continuous(limits= c(0,game$turn), breaks = c(seq(0,game$turn,4))) +
theme(axis.text.x=element_blank())+
ylab(switch(interface$var_plot,"tot_cities"="Cities","tot_troops"="troops","tot_tiles"="Tiles")) +
theme(legend.position = "none") +
scale_colour_manual(values=colori)
temp <- ggplotly(stats_plot, tooltip = "text", source = "S", kwargs=list(layout=list(hovermode="x")))
showModal(modalDialog(
title = paste0("Stats:"),
renderPlotly(temp),
easyClose = TRUE,
fade =FALSE,
size= "l",
footer = tagList(
actionButton("show_stats_cities", "Cities"),
actionButton("show_stats_tiles","Tiles"),
actionButton("show_stats_troops","Troops"),
modalButton("Close stats"))
))
})
observeEvent(input$show_stats_cities, {
interface$var_plot <- "tot_cities"
#colours
colori <- game$stats_turns$colours[1:length(unique(game$stats_turns$names))]
names(colori) <- game$stats_turns$names[1:length(unique(game$stats_turns$names))]
stats_plot <- ggplot(game$stats_turns,aes(x=turn,y=get(interface$var_plot)+seq(-0.03*length(unique(game$stats_turns$names))/2,0.03*length(unique(game$stats_turns$names))/2, length.out = length(unique(game$stats_turns$names))), text = get(interface$var_plot))) +
geom_line(aes(colour=names), size=1.2) +
theme_classic() +   #altrimenti classic
scale_x_continuous(limits= c(0,game$turn), breaks = c(seq(0,game$turn,4))) +
theme(axis.text.x=element_blank())+
ylab(switch(interface$var_plot,"tot_cities"="Cities","tot_troops"="troops","tot_tiles"="Tiles")) +
theme(legend.position = "none") +
scale_colour_manual(values=colori)
temp <- ggplotly(stats_plot, tooltip = "text", source = "S", kwargs=list(layout=list(hovermode="x")))
showModal(modalDialog(
title = paste0("Stats:"),
renderPlotly(temp),
easyClose = TRUE,
fade =FALSE,
size= "l",
footer = tagList(
actionButton("show_stats_cities", "Cities"),
actionButton("show_stats_tiles","Tiles"),
actionButton("show_stats_troops","Troops"),
modalButton("Close stats"))
))
})
#---------------------------- ORDERS BUTTONS ------------------------
#MOVE & UNSTACK buttons
observeEvent(input$move_ui, {
if(((game$turn %/% 2) %% length(seasons) + 1 == length(seasons))|(game$turn %% 2 == 1)){
showNotification("You can not move troops in winter or when moves' results are being displayed.", duration = 5, type= "error")
} else {
interface$input_order_state <- "move"
interface$last_click<-NA
interface$curr_click<-NA
showNotification("Click one of your units and an adjacent destination territory on the map to move units", duration = 5, type= "message")
}})
observeEvent(input$unstack_ui, {
if(((game$turn %/% 2) %% length(seasons) + 1 == length(seasons))|(game$turn %% 2 == 1)){
showNotification("You can not unstack troops in winteror when moves' results are being displayed..", duration = 5, type= "error")
} else {
interface$input_order_state <- "unstack"
interface$last_click<-NA
interface$curr_click<-NA
showNotification("Click the origin and destination territories on the map to unstack units. Unstack orders can only be given to stacked units.", duration = 5, type= "message")
}})
#RECRUIT BUTTON
observeEvent(input$recruit_ui, {
if(((game$turn %/% 2) %% length(seasons) + 1 == length(seasons))|(game$turn %% 2 == 0)){
interface$input_order_state <- "recruit"
showNotification("Click on the map to give recruit orders", duration = 5, type= "message")
} else {
showNotification("You can only recruit troops in winter.", duration = 5, type= "error")
}})
#DISBAND BUTTON
observeEvent(input$disband_ui, {
if(game$turn %% 2 == 0){
interface$input_order_state <- "disband"
showNotification("Click on the map to disband units", duration = 5, type= "message")
}})
#RULER BUTTON
observeEvent(input$ruler_ui, {
if(((game$turn %/% 2) %% length(seasons) + 1 == length(seasons))|(game$turn %% 2 == 1)){
showNotification("You can not move your king in winter.", duration = 5, type= "error")
} else {
interface$input_order_state <- "ruler"
showNotification("Click on your territories to move the ruler", duration = 5, type= "message")
}})
#CLEAR buttons
observeEvent(input$clear_order_ui, {
interface$last_click<-NA
interface$curr_click<-NA
if((nrow(game$orders)>0)&(game$turn %% 2 == 0)){
game$orders<-game$orders[-nrow(game$orders),]
}else{showNotification("There is no order to clear", duration = 5, type= "error")}})
observeEvent(input$clear_select_ui, {
interface$last_click<-NA
interface$curr_click<-NA
if((nrow(game$orders)>0)&(game$turn %% 2 == 0)){
interface$input_order_state <- "clear"
}else{showNotification("There is no order to clear", duration = 5, type= "error")}})
observeEvent(input$clear_all_ui, {
interface$last_click<-NA
interface$curr_click<-NA
if((nrow(game$orders)>0)&(game$turn %% 2 == 0)){
game$orders<-game$orders[-c(1:nrow(game$orders)),]
}else{showNotification("There is no order to clear", duration = 5, type= "error")}})
#---------------------------- MAP CLICKING ------------------------
#GET MAP CLICKS COORDINATES
interface$clicks <- reactive({
temp_click <- event_data("plotly_click", source="M", priority = "event")
if (is.null(temp_click)) {
NA
} else {
as.numeric(temp_click$key[[1]])
}
})
#record current and previous clicks
observeEvent(interface$clicks(),{if((interface$clicks() != interface$curr_click)|is.na(interface$curr_click)|is.na(interface$clicks())){
interface$last_click <- interface$curr_click;
interface$curr_click <- interface$clicks()}})
#INPUT ORDERS BY CLICKING
observeEvent(interface$curr_click, {
if(!is.na(interface$input_order_state)){
#add MOVE order -----------------------------
if(interface$input_order_state=="move"&!is.na(interface$curr_click)&!is.na(interface$last_click)&!(paste("move",interface$last_click,interface$curr_click) %in% do.call(paste,game$orders))){
#check whether the order is for a territory with a player controlled tiles
if (interface$last_click %in% game$territories$punits_tiles){
#check whether the origin and destination are adjacent
if (game$territories$adjacency[interface$curr_click,interface$last_click]){
#add order
game$orders[nrow(game$orders)+1,]<- c("move",interface$last_click,interface$curr_click)
#remove any pre-existing move or unstack order assigned to the troop
if(nrow(game$orders[(game$orders$type %in% c("unstack","move","disband"))&(game$orders$tile_number == interface$last_click),])>1){
game$orders <- game$orders[!(((game$orders$type == "unstack")&(game$orders$tile_number == interface$last_click))|((game$orders$type=="disband")&(game$orders$tile_number == interface$last_click))|((game$orders$type == "move")&(game$orders$tile_number == interface$last_click)&(game$orders$to != interface$curr_click))),]
}
} else {showNotification("Units can only move to adjacent territories",duration = 7,type = "error")}
} else {showNotification("You can give move orders to your units only. Click one of your units and then click an adjacent territory to insert a valid move order.",duration = 7,type = "error")}
interface$last_click<-NA
interface$curr_click<-NA
}
#add UNSTACK order  --------------------
if(interface$input_order_state=="unstack"&!is.na(interface$curr_click)&!is.na(interface$last_click)&!(paste("unstack",interface$last_click,interface$curr_click) %in% do.call(paste,game$orders))){
#check whether the order is for a territory with a player controlled tiles that has more than one troop
if ((interface$last_click %in% game$territories$punits_tiles)&(game$territories$data$size_display_troops[interface$last_click]>1)){
#check whether the origin and destination are adjacent
if (game$territories$adjacency[interface$curr_click,interface$last_click]){
#add order
game$orders[nrow(game$orders)+1,]<- c("unstack",interface$last_click,interface$curr_click)
#remove any pre-existing move, unstack or disband order assigned to the troop
if(nrow(game$orders[(game$orders$type %in% c("unstack","move","disband"))&(game$orders$tile_number == interface$last_click),])>1){
game$orders <- game$orders[!(((game$orders$type == "move")&(game$orders$tile_number == interface$last_click))|((game$orders$type=="disband")&(game$orders$tile_number == interface$last_click))|((game$orders$type == "unstack")&(game$orders$tile_number == interface$last_click)&(game$orders$to != interface$curr_click))),]
}
} else {showNotification("Troops can only unstack to adjacent territory",duration = 7,type = "error")}
} else {showNotification("You can give unstack orders only to units that belong to you and contain more than one troop. Click one of your stacked units and then click an adjacent territory to insert a valid unstack order.",duration = 7,type = "error")}
interface$last_click<-NA
interface$curr_click<-NA
}
#RECRUIT order  ------------------------
if(interface$input_order_state=="recruit"&!is.na(interface$curr_click)){
#remove existing recruit order
if(paste("recruit",interface$curr_click,NA) %in% do.call(paste,game$orders)){
game$orders <- game$orders[-c(match(paste("recruit",interface$curr_click,NA),do.call(paste,game$orders))),]
interface$last_click<-NA
interface$curr_click<-NA
} else {
#check whether the recruit order is for a player controlled core territory
if ((interface$curr_click %in% game$territories$player_tiles)&(game$territories$data$core[interface$curr_click]==game$territories$data$owner[interface$curr_click])){ #&(interface$curr_click %in% game$territories$city_tiles)
#add new recruit order
game$orders[nrow(game$orders)+1,]<- c("recruit",interface$curr_click,NA)
#remove any pre-existing disband order
if(nrow(game$orders[(game$orders$type %in% c("disband"))&(game$orders$tile_number == interface$curr_click),])>0){
game$orders <- game$orders[!((game$orders$type %in% c("disband"))&(game$orders$tile_number == interface$curr_click)),]
showNotification("You cannot recruit and disband in the same territory. Disband order has been cancelled.", duration = 5, type= "message")
}
} else {showNotification("You can only recruit in your core territories.", duration = 7, type = "error")}
interface$last_click<-NA
interface$curr_click<-NA
}
#DISBAND order -------------------------
if(interface$input_order_state=="disband"&!is.na(interface$curr_click)){
#remove existing disband order
if(paste("disband",interface$curr_click,NA) %in% do.call(paste,game$orders)){
game$orders <- game$orders[-c(match(paste("disband",interface$curr_click,NA),do.call(paste,game$orders))),]
interface$last_click<-NA
interface$curr_click<-NA
} else {
#check whether the recruit order is for a player-controlled unit
if ((interface$curr_click %in% game$territories$punits_tiles)){
#add new disband order
game$orders[nrow(game$orders)+1,]<- c("disband",interface$curr_click,NA)
#remove any pre-existing move, unstack or recruit order assigned to the troop
if(nrow(game$orders[(game$orders$type %in% c("unstack","move","recruit"))&(game$orders$tile_number == interface$curr_click),])>0){
game$orders <- game$orders[!((game$orders$type %in% c("unstack","move","recruit"))&(game$orders$tile_number == interface$curr_click)),]
}
} else {showNotification("In this territory there is no unit under your control. You can only disband your units.", duration = 7, type = "error")}
interface$last_click<-NA
interface$curr_click<-NA
}
#RULER move -------------------------
if(interface$input_order_state=="ruler"&!is.na(interface$curr_click)){
#check whether the recruit order is for a player controlled territory else return an error message
if (interface$curr_click %in% game$territories$player_tiles){
#identify owner of clicked territory
temp <- game$territories$data$owner[interface$curr_click]
#delete ruler from previous position
game$territories$data$ruler[game$territories$data$owner==temp]<-FALSE
#place it in new territory
game$territories$data$ruler[interface$curr_click]<-TRUE
} else {showNotification("You can only move rulers in territories you own.", duration = 7, type = "error")}
#reset clicks
interface$last_click<-NA
interface$curr_click<-NA
}
#CLICK TO CLEAR move -------------------------
if(interface$input_order_state=="clear"&!is.na(interface$curr_click)){
if (interface$curr_click %in% game$orders$tile_number){
game$orders<-game$orders[!(interface$curr_click == game$orders$tile_number),]
}
#reset clicks
interface$last_click<-NA
interface$curr_click<-NA
}
})
###### TEST TEXT ###
#output$info_click <- renderPrint(interface$turns_core_acquisition)
######___________###
###### TEST TEXT ###
#output$test_text <- renderText(paste(interface$input_order_state,interface$curr_click,interface$last_click ))
######___________###
###### TEST TABLE ###
#output$test_table <- renderTable(game$orders)
######___________###
}
# Create Shiny app ------------------------------------
shinyApp(ui = ui, server = server)
